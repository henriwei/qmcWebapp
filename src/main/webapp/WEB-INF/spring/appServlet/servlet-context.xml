<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model, 
	enable annotation configuration for controller and spring 3 type conversion, formatting support-->
	<annotation-driven validator="validator">
<!-- 		<message-converters> -->
<!--         	<class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/> -->
<!--       	</message-converters> -->
	</annotation-driven>
    
    <!-- Enable controller method level security -->
<!--     <security:global-method-security pre-post-annotations="enabled"/>     -->

	<!-- defining static resources and their location so spring MVC can improve performance in serving them (e.g. javascript, css ...).
	Handles HTTP GET requests for url pattern /resources/** by efficiently serving up static resources in the location
	specified by location attribut, ${webappRoot}/resources directory.
	e.g. if index.html has to import resource like following:
			<script src="resources/js/angular.js"></script>
		 with resources config: location="/resources/" mapping="/resources/**"
		 spring will search by path: webappRoot/resources/js/angular.js
	 -->
    <resources location="/resources/" mapping="/resources/**"/>  
<!-- 	<resources location="classpath:/WEB-INF/lib/" mapping="/*"/> -->
	
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".html" />
    </beans:bean>
    
    <!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
    <default-servlet-handler/> 
	
	<context:component-scan base-package="com.myway.questmultichoice.controller" />
	
    <!-- register "global" interceptor beans to apply to all registered HandlerMappings 
    support locale switching with URL param 'lang'-->
<!--     <interceptors> -->
<!--         <beans:bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>       -->
<!--         <beans:bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/> -->
<!--     </interceptors> -->
    
    <!-- Resolves localized messages*.properties and application.properties files in the application to allow for internationalization. 
        The messages*.properties files translate messages, the application.properties
        resource bundle localizes all application specific messages such as entity names and menu items. 
        Do not fall back to the system's locale if the client locale is not found, 
        the application server's locale is not relevant, the messages.properties is used instead of messages_XXX.properties-->
    <beans:bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application" p:fallbackToSystemLocale="false"/>

    <!-- storage and retrieve of locale setting in client browser's cookie with name 'locale' -->
<!--     <beans:bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver"  -->
<!--         p:cookieName="locale"/> -->
        
    <!-- resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
<!--     <beans:bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/> -->
    
    <!-- store preferred theme configuration in a cookie -->
<!--     <beans:bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>                   -->
    
     <!-- Tiles Configuration -->
<!--     <beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver"> -->
<!--         <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/> -->
<!--     </beans:bean> -->
    
<!--     <beans:bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer"> -->
<!--         <beans:property name="definitions"> -->
<!--             <beans:list> -->
<!--                 <beans:value>/WEB-INF/layouts/layouts.xml</beans:value> -->
<!--                 Scan views directory for Tiles configurations -->
<!--                 <beans:value>/WEB-INF/views/**/views.xml</beans:value> -->
<!--             </beans:list> -->
<!--         </beans:property> -->
<!--     </beans:bean> -->
    
    <beans:bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <beans:property name="validationMessageSource" ref="messageSource"/>
    </beans:bean>        


    <!-- Enable file upload functionality -->
<!--     <beans:bean class="org.springframework.web.multipart.support.StandardServletMultipartResolver" id="multipartResolver"/> -->
     
</beans:beans>
